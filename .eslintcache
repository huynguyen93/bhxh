[{"/home/huy/projects/bhxh/src/App.js":"1","/home/huy/projects/bhxh/src/constants.js":"2","/home/huy/projects/bhxh/src/reportWebVitals.js":"3","/home/huy/projects/bhxh/src/index.js":"4","/home/huy/projects/bhxh/src/utils.js":"5","/home/huy/projects/bhxh/src/components/ModalSalary.js":"6"},{"size":9048,"mtime":1611643835623,"results":"7","hashOfConfig":"8"},{"size":921,"mtime":1611298417772,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1610519047769,"results":"10","hashOfConfig":"8"},{"size":500,"mtime":1610519047769,"results":"11","hashOfConfig":"8"},{"size":2687,"mtime":1611298988559,"results":"12","hashOfConfig":"8"},{"size":668,"mtime":1611137325867,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"2zwhay",{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/huy/projects/bhxh/src/App.js",["27"],"/home/huy/projects/bhxh/src/constants.js",[],"/home/huy/projects/bhxh/src/reportWebVitals.js",[],"/home/huy/projects/bhxh/src/index.js",[],"/home/huy/projects/bhxh/src/utils.js",["28","29"],"import {percentageCompanyPays, percentageWorkerPays, salaryTypes} from \"./constants\";\n\nfunction calculatePeriods(periods) {\n  let totalMonthsBefore2014 = 0;\n  let totalMonthsFrom2014 = 0;\n  let adjustedSalary = 0;\n\n  periods.forEach(period => {\n    const monthStart = parseInt(period.monthStart);\n    const yearStart = parseInt(period.yearStart);\n    const monthEnd = parseInt(period.monthEnd);\n    const yearEnd = parseInt(period.yearEnd);\n    const salary = parseInt(period.salary);\n    const salaryType = period.salaryType;\n    const insuranceSalary = salaryType === salaryTypes.contracted\n      ? contractedSalaryToInsuranceSalary(salary)\n      : salary;\n\n    for (let year = yearStart; year <= yearEnd; year++) {\n      const adjustment = getAdjustmentRate(year);\n      let totalMonthsOfPeriod = 0;\n\n      if (yearStart === yearEnd) {\n        totalMonthsOfPeriod = monthEnd - monthStart + 1;\n      } else if (year === yearStart) {\n        totalMonthsOfPeriod = 12 - monthStart + 1;\n      } else if (year === yearEnd) {\n        totalMonthsOfPeriod = monthEnd;\n      } else {\n        totalMonthsOfPeriod = 12;\n      }\n\n      adjustedSalary += (totalMonthsOfPeriod * insuranceSalary * adjustment);\n\n      if (yearEnd < 2014) {\n        totalMonthsBefore2014 += totalMonthsOfPeriod;\n      } else {\n        totalMonthsFrom2014 += totalMonthsOfPeriod;\n      }\n    }\n  });\n\n  const totalMonths = totalMonthsBefore2014 + totalMonthsFrom2014;\n  const adjustedAverageSalary = adjustedSalary / totalMonths;\n  const totalYearsBefore2014 = totalMonthsBefore2014 / 12;\n  const totalYearsFrom2014 = totalMonthsFrom2014 / 12;\n\n  return {\n    result: (1.5 * adjustedAverageSalary * totalYearsBefore2014) + (2.5 * adjustedAverageSalary * totalYearsFrom2014)\n  };\n}\n\nfunction validatePeriod(period) {\n  const {salary, monthStart, monthEnd, yearStart, yearEnd} = period;\n  let errorMessage = '';\n\n  if (!salary || !monthStart || !monthEnd || !yearStart || !yearEnd) {\n    errorMessage = 'Vui lòng điền hết thông tin!';\n  }\n\n  return errorMessage;\n}\n\nfunction getAdjustmentRate(year) {\n  return 2;\n}\n\nfunction getNumberOfYear({monthStart, yearStart, monthEnd, yearEnd}) {\n  return 1;\n}\n\nfunction contractedSalaryToInsuranceSalary(contractedSalary) {\n\n}\n\nfunction calculateAmountPaid(insuranceSalary) {\n  const byCompany = insuranceSalary * percentageCompanyPays / 100;\n  const byWorker = insuranceSalary * percentageWorkerPays / 100;\n\n  return {\n    byCompany,\n    byWorker,\n    total: byCompany + byWorker,\n  };\n}\n\nfunction formatNumber(number) {\n  return Math.round(number).toLocaleString('en');\n}\n\nexport default {\n  calculatePeriods,\n  validatePeriod,\n  calculateAmountPaid,\n  formatNumber,\n};\n","/home/huy/projects/bhxh/src/components/ModalSalary.js",[],{"ruleId":"30","severity":1,"message":"31","line":34,"column":11,"nodeType":"32","messageId":"33","endLine":34,"endColumn":18},{"ruleId":"30","severity":1,"message":"34","line":68,"column":10,"nodeType":"32","messageId":"33","endLine":68,"endColumn":25},{"ruleId":"35","severity":1,"message":"36","line":91,"column":1,"nodeType":"37","endLine":96,"endColumn":3},"no-unused-vars","'isValid' is assigned a value but never used.","Identifier","unusedVar","'getNumberOfYear' is defined but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration"]