[{"/home/huy/projects/bhxh/src/App.js":"1","/home/huy/projects/bhxh/src/constants.js":"2","/home/huy/projects/bhxh/src/reportWebVitals.js":"3","/home/huy/projects/bhxh/src/index.js":"4","/home/huy/projects/bhxh/src/utils.js":"5","/home/huy/projects/bhxh/src/components/ModalSalary.js":"6","/home/huy/projects/bhxh/src/components/ModalZones.js":"7"},{"size":10052,"mtime":1615002913227,"results":"8","hashOfConfig":"9"},{"size":1045,"mtime":1614940340397,"results":"10","hashOfConfig":"11"},{"size":362,"mtime":1611836204320,"results":"12","hashOfConfig":"9"},{"size":500,"mtime":1611836204320,"results":"13","hashOfConfig":"9"},{"size":4246,"mtime":1615002784351,"results":"14","hashOfConfig":"9"},{"size":668,"mtime":1611836204320,"results":"15","hashOfConfig":"9"},{"size":4669,"mtime":1611901987822,"results":"16","hashOfConfig":"11"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},"iky6jg",{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"2zwhay",{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/huy/projects/bhxh/src/App.js",["34"],"import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport ModalSalary from \"./components/ModalSalary\";\nimport {\n  months,\n  years\n} from \"./constants\";\nimport utils from \"./utils\";\n\nconst defaultPeriod = {\n  salary: '',\n};\n\nfunction App() {\n  const [periods, setPeriods] = React.useState([{...defaultPeriod}]);\n  const [result, setResult] = React.useState(null);\n  const [showModalSalary, setShowModalSalary] = React.useState(false);\n\n  const addPeriod = () => {\n    setPeriods([...periods, {...defaultPeriod}]);\n    setResult(null);\n  };\n\n  const removePeriod = (index) => {\n    setPeriods([...periods.filter((period, idx) => idx !== index)]);\n    setResult(null);\n  };\n\n  const calculate = () => {\n    const isValid = true;\n    const updatedPeriods = [];\n    let hasError = false;\n\n    periods.forEach((period) => {\n      const errorMessage = utils.validatePeriod(period);\n\n      if (errorMessage) hasError = true;\n\n      updatedPeriods.push({\n        ...period,\n        errorMessage: errorMessage,\n      })\n    });\n\n    setPeriods(updatedPeriods);\n\n    if (!hasError) {\n      setResult(utils.calculatePeriods(periods));\n    }\n  };\n\n  const updatePeriod = (periodIndex, data) => {\n    const updatedPeriods = [...periods];\n    updatedPeriods[periodIndex] = {\n      ...periods[periodIndex],\n      ...data,\n      errorMessage: '',\n    };\n\n    setPeriods([\n      ...updatedPeriods,\n    ]);\n\n    setResult(null);\n  };\n\n  const handleSalaryChange = (periodIndex, salary) => {\n    if (salary.length === 0) {\n      updatePeriod(periodIndex, {salary: ''});\n      return;\n    }\n\n    const salaryInInteger = parseInt(salary.replace(/[^0-9]/g, '') || 0);\n    const localeString = salaryInInteger.toLocaleString('en');\n    const formattedSalary = localeString.replace(/,/g, ' ');\n\n    const amountPaidForInsurance = utils.calculateAmountPaid(salaryInInteger);\n\n    updatePeriod(periodIndex, {salary: formattedSalary, amountPaidForInsurance});\n  };\nconsole.log(result);\n  return (\n    <div className=\"App\">\n      <table className=\"table table-bordered table-responsive-md\">\n        <thead>\n        <tr>\n          <th>#</th>\n          <th>Từ... </th>\n          <th>Đến... </th>\n          <th>\n            Lương đóng BHXH\n            <button\n              className=\"btn btn-sm btn-link mx-1\"\n              onClick={() => setShowModalSalary(true)}\n              disabled={showModalSalary}\n            >\n\n            </button>\n          </th>\n          <th/>\n        </tr>\n        </thead>\n        <tbody>\n          {periods.map((period, index) => {\n            const {\n              salary,\n            } = period;\n\n            return (\n              <tr key={index}>\n                <td>{index + 1}</td>\n                <td>\n                  <select\n                    id=\"inputState\"\n                    className=\"mr-3\"\n                    onChange={(e) => updatePeriod(index, {monthStart: e.target.value})}\n                  >\n                    <option>Tháng...</option>\n                    {months.map((label, index) => (<option value={index + 1} key={index}>{label}</option>))}\n                  </select>\n                  <select\n                    id=\"inputState\"\n                    className=\"\"\n                    onChange={(e) => updatePeriod(index, {yearStart: e.target.value})}\n                  >\n                    <option>Năm...</option>\n                    {years.map((label) => (<option value={label} key={label}>{label}</option>))}\n                  </select>\n                </td>\n                <td>\n                  <select\n                    id=\"inputState\"\n                    className=\"mr-3\"\n                    onChange={(e) => updatePeriod(index, {monthEnd: e.target.value})}\n                  >\n                    <option>Tháng...</option>\n                    {months.map((label, index) => (<option value={index + 1} key={index}>{label}</option>))}\n                  </select>\n                  <select\n                    id=\"inputState\"\n                    onChange={(e) => updatePeriod(index, {yearEnd: e.target.value})}\n                  >\n                    <option>Năm...</option>\n                    {years.map((label) => (<option value={label} key={label}>{label}</option>))}\n                  </select>\n                </td>\n                <td>\n                  <input\n                    type=\"text\"\n                    placeholder=\"10 000 000\"\n                    id=\"exampleInputEmail1\"\n                    aria-describedby=\"emailHelp\"\n                    value={salary}\n                    onChange={(e) => handleSalaryChange(index, e.target.value)}\n                    style={{width: '120px'}}\n                  />\n                  {' '}\n                  vnđ\n                </td>\n                <td>\n                  <button\n                    title=\"Xóa\"\n                    onClick={() => removePeriod(index)}\n                    className=\"btn btn-sm rounded btn-danger\"\n                  >\n                    xóa\n                  </button>\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n      <div className=\"mb-4\">\n        <button\n          onClick={addPeriod}\n          className=\"btn btn-sm btn-secondary mr-2\"\n        >\n          <b>+</b> thêm dòng\n        </button>\n      </div>\n      <ul>\n        {periods.map((period, index) => {\n          const {\n            monthStart,\n            monthEnd,\n            yearStart,\n            yearEnd,\n            errorMessage,\n          } = period;\n          let isValidTimeRange = true;\n          if (monthStart && monthEnd && yearStart && yearEnd) {\n            if (yearEnd < yearStart || (yearEnd === yearStart && monthEnd < monthStart)) {\n              isValidTimeRange = false;\n            }\n          }\n\n          if (isValidTimeRange && !errorMessage) {\n            return null;\n          }\n\n          return (\n            <li key={index}>\n              Lỗi ở dòng {index + 1}:\n              {' '}\n              {!isValidTimeRange && (\n                <span className=\"text-danger\">Thời gian không phù hợp, vui lòng chọn lại!</span>\n              )}\n              {' '}\n              {errorMessage && (\n                <span className=\"text-danger\">{errorMessage}</span>\n              )}\n            </li>\n          );\n        })}\n      </ul>\n\n      <div className=\"mt-5 mb-5\">\n        <button\n          className=\"btn btn-lg btn-primary\"\n          onClick={calculate}\n          disabled={periods.length === 0}\n        >\n          Xem kết quả\n        </button>\n      </div>\n      {result && (\n        <div>\n          <h2>Kết quả</h2>\n          <p>Số tháng tham gia BHXH: {result.totalMonths}</p>\n          <p>Mức lương đóng BHXH bình quân: {utils.formatNumber(result.adjustedAverageSalary, true)} / tháng</p>\n          <p>Số tiền <i>ước tính</i> đã đóng BHXH: {utils.formatNumber(result.estimatedContributed, true)}</p>\n          <p className=\"text-success\">\n            <b>\n              Số tiền <i>ước tính</i> sẽ nhận: <u>{utils.formatNumber(result.amountWillReceive, true)}</u>\n            </b>\n          </p>\n\n          <div className=\"mt-5\">\n            <h4>Công thức</h4>\n            <table className=\"table table-borderless table-responsive\">\n              <tbody>\n              <tr>\n                <td><b>Mức hưởng</b></td>\n                <td>=</td>\n                <td>(1,5 x Mbqtl x Thời gian đóng BHXH trước năm 2014)</td>\n                <td>+</td>\n                <td>(2 x Mbqtl x Thời gian đóng BHXH sau năm 2014)</td>\n              </tr>\n              </tbody>\n            </table>\n            <p>\n              Trong đó:\n              <ul>\n                <li>Thời gian đóng BHXH có tháng lẻ thì từ 01 - 06 tháng được tính là ½ năm, từ 07 - 11 tháng được tính là 01 năm.</li>\n                <li>Trường hợp tính đến trước 01/01/2014 nếu thời gian đóng BHXH có tháng lẻ thì những tháng lẻ đó được chuyển sang giai đoạn đóng BHXH từ 01/01/2014 trở đi.</li>\n                <li>Mbqtl là mức bình quân tiền lương tháng đóng BHXH.</li>\n              </ul>\n            </p>\n            <table className=\"table table-borderless table-responsive\">\n              <tbody>\n              <tr>\n                <td><b>Mbqtl</b></td>\n                <td>=</td>\n                <td>(Số tháng đóng BHXH x Tiền lương tháng đóng BHXH x Mức điều chỉnh hàng năm)</td>\n                <td>:</td>\n                <td>Tổng số tháng đóng BHXH</td>\n              </tr>\n              </tbody>\n            </table>\n\n            <p>Dựa theo công thức:</p>\n            <table className=\"table table-borderless table-responsive\">\n              <tbody>\n              <tr>\n                <td><b>Mbqtl</b></td>\n                <td>=</td>\n                <td>{result.adjustedAverageSalaryFormula}</td>\n                <td>=</td>\n                <td>{utils.formatNumber(result.adjustedAverageSalary)}</td>\n              </tr>\n              <tr>\n                <td><b>Mức hưởng</b></td>\n                <td>=</td>\n                <td>\n                  {result.totalYearsBefore2014 > 0 && (\n                    `(${1.5} x ${result.adjustedAverageSalary} x ${result.totalYearsBefore2014})`\n                  )}\n                  {result.totalYearsBefore2014 > 0 && result.totalYearsFrom2014 > 0 && (\n                    ' + '\n                  )}\n                  {result.totalYearsFrom2014 > 0 && (\n                    `(${1.5} x ${result.adjustedAverageSalary} x ${result.totalYearsFrom2014})`\n                  )}\n                </td>\n                <td>=</td>\n                <td>{utils.formatNumber(result.amountWillReceive)}</td>\n              </tr>\n              </tbody>\n            </table>\n          </div>\n        </div>\n      )}\n      <ModalSalary show={showModalSalary} setShow={setShowModalSalary}/>\n    </div>\n  );\n}\n\nexport default App;\n","/home/huy/projects/bhxh/src/constants.js",[],"/home/huy/projects/bhxh/src/reportWebVitals.js",[],"/home/huy/projects/bhxh/src/index.js",[],"/home/huy/projects/bhxh/src/utils.js",["35"],"import {percentageCompanyPays, percentageWorkerPays, salaryTypes} from \"./constants\";\n\nfunction calculatePeriods(periods) {\n  let totalMonthsBefore2014 = 0;\n  let totalMonthsFrom2014 = 0;\n  let adjustedSalary = 0;\n  let estimatedContributed = 0;\n  let adjustedAverageSalaryFormula = '{';\n\n  periods.forEach(period => {\n    const monthStart = parseInt(period.monthStart);\n    const yearStart = parseInt(period.yearStart);\n    const monthEnd = parseInt(period.monthEnd);\n    const yearEnd = parseInt(period.yearEnd);\n    const salary = parseInt(period.salary.split(' ').join(''));\n    const salaryType = period.salaryType;\n    const insuranceSalary = salaryType === salaryTypes.contracted\n      ? contractedSalaryToInsuranceSalary(salary)\n      : salary;\n\n    for (let year = yearStart; year <= yearEnd; year++) {\n      const adjustment = getAdjustmentRate(year);\n      let totalMonthsOfPeriod = 0;\n\n      if (yearStart === yearEnd) {\n        totalMonthsOfPeriod = monthEnd - monthStart + 1;\n      } else if (year === yearStart) {\n        totalMonthsOfPeriod = 12 - monthStart + 1;\n      } else if (year === yearEnd) {\n        totalMonthsOfPeriod = monthEnd;\n      } else {\n        totalMonthsOfPeriod = 12;\n      }\n\n      adjustedAverageSalaryFormula += `(${totalMonthsOfPeriod} * ${formatNumber(insuranceSalary)} * ${adjustment})`\n      adjustedSalary += (totalMonthsOfPeriod * insuranceSalary * adjustment);\n      estimatedContributed += (totalMonthsOfPeriod * insuranceSalary) * 20 / 100;\n\n      if (year < 2014) {\n        totalMonthsBefore2014 += totalMonthsOfPeriod;\n      } else {\n        totalMonthsFrom2014 += totalMonthsOfPeriod;\n      }\n    }\n  });\n\n  const totalMonths = totalMonthsBefore2014 + totalMonthsFrom2014;\n\n  const adjustedAverageSalary = adjustedSalary / totalMonths;\n  const totalYearsBefore2014 = calculateTotalYears(totalMonthsBefore2014);\n  const totalYearsFrom2014 = calculateTotalYears(totalMonthsFrom2014);\n\n  adjustedAverageSalaryFormula = adjustedAverageSalaryFormula.split(')(').join(') + (');\n  adjustedAverageSalaryFormula += `} : ${totalMonths}`;\n\n  return {\n    totalYearsBefore2014,\n    totalYearsFrom2014,\n    adjustedAverageSalaryFormula,\n    estimatedContributed,\n    adjustedSalary,\n    adjustedAverageSalary,\n    totalMonths,\n    amountWillReceive: (1.5 * adjustedAverageSalary * totalYearsBefore2014) + (2 * adjustedAverageSalary * totalYearsFrom2014)\n  };\n}\n\nfunction calculateTotalYears(totalMonths) {\n  const modulo = totalMonths % 12;\n  const rawYears = totalMonths / 12;\n  if (modulo === 0) {\n    return rawYears;\n  } else if (modulo <= 6) {\n    return Math.round(rawYears) + 0.5\n  } else {\n    return Math.ceil(rawYears);\n  }\n}\n\nfunction validatePeriod(period) {\n  const {salary, monthStart, monthEnd, yearStart, yearEnd} = period;\n  let errorMessage = '';\n\n  if (!salary || !monthStart || !monthEnd || !yearStart || !yearEnd) {\n    errorMessage = 'Vui lòng điền hết thông tin!';\n  }\n\n  return errorMessage;\n}\n\nfunction getAdjustmentRate(year) {\n  const mapping = {\n    1995: 4.85,\n    1996: 4.12,\n    1997: 3.89,\n    1998: 3.77,\n    1999: 3.5,\n    2000: 3.41,\n    2001: 3.42,\n    2002: 3.29,\n    2003: 3.19,\n    2004: 2.96,\n    2005: 2.73,\n    2006: 2.54,\n    2007: 2.35,\n    2008: 1.91,\n    2009: 1.79,\n    2010: 1.64,\n    2011: 1.38,\n    2012: 1.26,\n    2013: 1.18,\n    2014: 1.14,\n    2015: 1.13,\n    2016: 1.1,\n    2017: 1.06,\n    2018: 1.03,\n    2019: 1,\n    2020: 1,\n  };\n\n  const years = Object.keys(mapping);\n  if (year < mapping[years[0]]) {\n    return mapping[years[0]];\n  }\n\n  if (year > mapping[years[years.length - 1]]) {\n    return mapping[years[years.length - 1]];\n  }\n\n  return mapping[year];\n}\n\nfunction contractedSalaryToInsuranceSalary(contractedSalary) {\n\n}\n\nfunction calculateAmountPaid(insuranceSalary) {\n  const byCompany = insuranceSalary * percentageCompanyPays / 100;\n  const byWorker = insuranceSalary * percentageWorkerPays / 100;\n\n  return {\n    byCompany,\n    byWorker,\n    total: byCompany + byWorker,\n  };\n}\n\nfunction formatNumber(number, withVnd = false) {\n  const suffix = withVnd ? ' vnđ' : '';\n  return Math.round(number).toLocaleString('en') + suffix;\n}\n\nexport default {\n  calculatePeriods,\n  validatePeriod,\n  calculateAmountPaid,\n  formatNumber,\n};\n","/home/huy/projects/bhxh/src/components/ModalSalary.js",[],["36","37"],"/home/huy/projects/bhxh/src/components/ModalZones.js",[],{"ruleId":"38","severity":1,"message":"39","line":30,"column":11,"nodeType":"40","messageId":"41","endLine":30,"endColumn":18},{"ruleId":"42","severity":1,"message":"43","line":153,"column":1,"nodeType":"44","endLine":158,"endColumn":3},{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","replacedBy":"48"},"no-unused-vars","'isValid' is assigned a value but never used.","Identifier","unusedVar","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-native-reassign",["49"],"no-negated-in-lhs",["50"],"no-global-assign","no-unsafe-negation"]