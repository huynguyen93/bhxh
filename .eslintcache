[{"/home/huy/projects/bhxh/src/App.js":"1","/home/huy/projects/bhxh/src/constants.js":"2","/home/huy/projects/bhxh/src/reportWebVitals.js":"3","/home/huy/projects/bhxh/src/index.js":"4","/home/huy/projects/bhxh/src/utils.js":"5","/home/huy/projects/bhxh/src/components/ModalSalary.js":"6","/home/huy/projects/bhxh/src/components/ModalZones.js":"7","/home/huy/projects/bhxh/src/components/Result.js":"8","/home/huy/projects/bhxh/src/components/ModalAdjustments.js":"9"},{"size":6919,"mtime":1615005166235,"results":"10","hashOfConfig":"11"},{"size":1448,"mtime":1615005612067,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":1611836204320,"results":"13","hashOfConfig":"11"},{"size":500,"mtime":1611836204320,"results":"14","hashOfConfig":"11"},{"size":3823,"mtime":1615007234168,"results":"15","hashOfConfig":"11"},{"size":668,"mtime":1611836204320,"results":"16","hashOfConfig":"11"},{"size":4669,"mtime":1611901987822,"results":"17","hashOfConfig":"18"},{"size":3685,"mtime":1615007354885,"results":"19","hashOfConfig":"11"},{"size":1470,"mtime":1615005937414,"results":"20","hashOfConfig":"11"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"iky6jg",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"2zwhay",{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/huy/projects/bhxh/src/App.js",["45"],"/home/huy/projects/bhxh/src/constants.js",[],["46","47"],"/home/huy/projects/bhxh/src/reportWebVitals.js",[],["48","49"],"/home/huy/projects/bhxh/src/index.js",[],["50","51"],"/home/huy/projects/bhxh/src/utils.js",["52"],"import {adjustments, percentageCompanyPays, percentageWorkerPays, salaryTypes} from \"./constants\";\n\nfunction calculatePeriods(periods) {\n  let totalMonthsBefore2014 = 0;\n  let totalMonthsFrom2014 = 0;\n  let adjustedSalary = 0;\n  let estimatedContributed = 0;\n  let adjustedAverageSalaryFormula = '{';\n\n  periods.forEach(period => {\n    const monthStart = parseInt(period.monthStart);\n    const yearStart = parseInt(period.yearStart);\n    const monthEnd = parseInt(period.monthEnd);\n    const yearEnd = parseInt(period.yearEnd);\n    const salary = parseInt(period.salary.split(' ').join(''));\n    const salaryType = period.salaryType;\n    const insuranceSalary = salaryType === salaryTypes.contracted\n      ? contractedSalaryToInsuranceSalary(salary)\n      : salary;\n\n    for (let year = yearStart; year <= yearEnd; year++) {\n      const adjustment = getAdjustmentRate(year);\n      let totalMonthsOfPeriod = 0;\n\n      if (yearStart === yearEnd) {\n        totalMonthsOfPeriod = monthEnd - monthStart + 1;\n      } else if (year === yearStart) {\n        totalMonthsOfPeriod = 12 - monthStart + 1;\n      } else if (year === yearEnd) {\n        totalMonthsOfPeriod = monthEnd;\n      } else {\n        totalMonthsOfPeriod = 12;\n      }\n\n      adjustedAverageSalaryFormula += `(${totalMonthsOfPeriod} * ${formatNumber(insuranceSalary)} * ${adjustment})`\n      adjustedSalary += (totalMonthsOfPeriod * insuranceSalary * adjustment);\n      estimatedContributed += (totalMonthsOfPeriod * insuranceSalary) * 20 / 100;\n\n      if (year < 2014) {\n        totalMonthsBefore2014 += totalMonthsOfPeriod;\n      } else {\n        totalMonthsFrom2014 += totalMonthsOfPeriod;\n      }\n    }\n  });\n\n  const totalMonths = totalMonthsBefore2014 + totalMonthsFrom2014;\n\n  const adjustedAverageSalary = adjustedSalary / totalMonths;\n  const totalYearsBefore2014 = calculateTotalYears(totalMonthsBefore2014);\n  const totalYearsFrom2014 = calculateTotalYears(totalMonthsFrom2014);\n\n  adjustedAverageSalaryFormula = adjustedAverageSalaryFormula.split(')(').join(') + (');\n  adjustedAverageSalaryFormula += `} : ${totalMonths}`;\n\n  return {\n    totalYearsBefore2014,\n    totalYearsFrom2014,\n    adjustedAverageSalaryFormula,\n    estimatedContributed,\n    adjustedSalary,\n    adjustedAverageSalary,\n    totalMonths,\n    amountWillReceive: (1.5 * adjustedAverageSalary * totalYearsBefore2014) + (2 * adjustedAverageSalary * totalYearsFrom2014)\n  };\n}\n\nfunction calculateTotalYears(totalMonths) {\n  const modulo = totalMonths % 12;\n  const rawYears = totalMonths / 12;\n  if (modulo === 0) {\n    return rawYears;\n  } else if (modulo <= 6) {\n    return Math.round(rawYears) + 0.5\n  } else {\n    return Math.ceil(rawYears);\n  }\n}\n\nfunction validatePeriod(period) {\n  const {salary, monthStart, monthEnd, yearStart, yearEnd} = period;\n  let errorMessage = '';\n\n  if (!salary || !monthStart || !monthEnd || !yearStart || !yearEnd) {\n    errorMessage = 'Vui lòng điền hết thông tin!';\n  }\n\n  return errorMessage;\n}\n\nfunction getAdjustmentRate(year) {\n  const years = Object.keys(adjustments);\n  if (year < years[0]) {\n    return adjustments[years[0]];\n  }\n\n  if (year > years[years.length - 1]) {\n    return adjustments[years[years.length - 1]];\n  }\n\n  return adjustments[year];\n}\n\nfunction contractedSalaryToInsuranceSalary(contractedSalary) {\n\n}\n\nfunction calculateAmountPaid(insuranceSalary) {\n  const byCompany = insuranceSalary * percentageCompanyPays / 100;\n  const byWorker = insuranceSalary * percentageWorkerPays / 100;\n\n  return {\n    byCompany,\n    byWorker,\n    total: byCompany + byWorker,\n  };\n}\n\nfunction formatNumber(number, withVnd = false) {\n  const suffix = withVnd ? ' vnđ' : '';\n  return Math.round(number).toLocaleString('en') + suffix;\n}\n\nexport default {\n  calculatePeriods,\n  validatePeriod,\n  calculateAmountPaid,\n  formatNumber,\n};\n","/home/huy/projects/bhxh/src/components/ModalSalary.js",[],["53","54"],"/home/huy/projects/bhxh/src/components/ModalZones.js",[],"/home/huy/projects/bhxh/src/components/Result.js",["55"],"import React from 'react';\nimport utils from '../utils';\nimport ModalAdjustments from './ModalAdjustments';\n\nfunction Result({ result }) {\n  const [showModalAdjustments, setShowModalAdjustments] = React.useState(false);\n  console.log(result);\n\n  return (\n    <div>\n      <h2>Kết quả</h2>\n      <p>Số tháng tham gia BHXH: {result.totalMonths}</p>\n      <p>Mức lương đóng BHXH bình quân: {utils.formatNumber(result.adjustedAverageSalary, true)} / tháng</p>\n      <p>Số tiền <i>ước tính</i> đã đóng BHXH: {utils.formatNumber(result.estimatedContributed, true)}</p>\n      <p className=\"text-success\">\n        <b>\n          Số tiền <i>ước tính</i> sẽ nhận: <u>{utils.formatNumber(result.amountWillReceive, true)}</u>\n        </b>\n      </p>\n      <p className=\"text-secondary\">\n        <small>* Kết quả có thể chênh lệch nhỏ so với thực tế vì nhiều lý do!</small>\n      </p>\n\n      <div className=\"mt-5\">\n        <h4>Công thức</h4>\n        <table className=\"table table-borderless table-responsive\">\n          <tbody>\n          <tr>\n            <td><b>Mbqtl</b></td>\n            <td>=</td>\n            <td>\n              (Số tháng đóng BHXH x Tiền lương tháng đóng BHXH x Mức điều chỉnh hàng năm)\n              {' : '}\n              Tổng số tháng đóng BHXH\n            </td>\n          </tr>\n          <tr>\n            <td><b>Mức hưởng</b></td>\n            <td>=</td>\n            <td>\n              (1,5 x Mbqtl x Thời gian đóng BHXH trước năm 2014)\n              {' + '}\n              (2 x Mbqtl x Thời gian đóng BHXH sau năm 2014)\n            </td>\n          </tr>\n          </tbody>\n        </table>\n        Trong đó\n        <ul>\n          <li>Mbqtl là mức bình quân tiền lương tháng đóng BHXH.</li>\n          <li>Thời gian đóng BHXH có tháng lẻ thì từ 01 - 06 tháng được tính là ½ năm, từ 07 - 11 tháng được tính là 01 năm.</li>\n          <li>Trường hợp tính đến trước 01/01/2014 nếu thời gian đóng BHXH có tháng lẻ thì những tháng lẻ đó được chuyển sang giai đoạn đóng BHXH từ 01/01/2014 trở đi.</li>\n          <li>\n            <a href=\"#\" onClick={() => {setShowModalAdjustments(!showModalAdjustments)}}>\n              Xem bảng mức điều chỉnh hằng năm\n            </a>\n          </li>\n        </ul>\n\n\n        <p className=\"mt-4\">Dựa theo công thức:</p>\n        <table className=\"table table-borderless table-responsive\">\n          <tbody>\n          <tr>\n            <td><b>Mbqtl</b></td>\n            <td>=</td>\n            <td>{result.adjustedAverageSalaryFormula}</td>\n            <td>=</td>\n            <td>{utils.formatNumber(result.adjustedAverageSalary)}</td>\n          </tr>\n          <tr>\n            <td><b>Mức hưởng</b></td>\n            <td>=</td>\n            <td>\n              {result.totalYearsBefore2014 > 0 && (\n                `(${1.5} * ${utils.formatNumber(result.adjustedAverageSalary)} * ${result.totalYearsBefore2014})`\n              )}\n              {result.totalYearsBefore2014 > 0 && result.totalYearsFrom2014 > 0 && (\n                ' + '\n              )}\n              {result.totalYearsFrom2014 > 0 && (\n                `(${2} * ${utils.formatNumber(result.adjustedAverageSalary)} * ${result.totalYearsFrom2014})`\n              )}\n            </td>\n            <td>=</td>\n            <td>{utils.formatNumber(result.amountWillReceive)}</td>\n          </tr>\n          </tbody>\n        </table>\n      </div>\n      <ModalAdjustments show={showModalAdjustments} setShow={setShowModalAdjustments} />\n    </div>\n  )\n}\n\nexport default Result;\n","/home/huy/projects/bhxh/src/components/ModalAdjustments.js",[],{"ruleId":"56","severity":1,"message":"57","line":31,"column":11,"nodeType":"58","messageId":"59","endLine":31,"endColumn":18},{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","replacedBy":"63"},{"ruleId":"60","replacedBy":"64"},{"ruleId":"62","replacedBy":"65"},{"ruleId":"60","replacedBy":"66"},{"ruleId":"62","replacedBy":"67"},{"ruleId":"68","severity":1,"message":"69","line":124,"column":1,"nodeType":"70","endLine":129,"endColumn":3},{"ruleId":"60","replacedBy":"71"},{"ruleId":"62","replacedBy":"72"},{"ruleId":"73","severity":1,"message":"74","line":54,"column":13,"nodeType":"75","endLine":54,"endColumn":90},"no-unused-vars","'isValid' is assigned a value but never used.","Identifier","unusedVar","no-native-reassign",["76"],"no-negated-in-lhs",["77"],["76"],["77"],["76"],["77"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration",["76"],["77"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation"]