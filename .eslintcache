[{"/home/huy/projects/bhxh/src/App.js":"1","/home/huy/projects/bhxh/src/constants.js":"2","/home/huy/projects/bhxh/src/reportWebVitals.js":"3","/home/huy/projects/bhxh/src/index.js":"4","/home/huy/projects/bhxh/src/utils.js":"5","/home/huy/projects/bhxh/src/components/ModalSalary.js":"6","/home/huy/projects/bhxh/src/components/ModalZones.js":"7"},{"size":9558,"mtime":1611837102599,"results":"8","hashOfConfig":"9"},{"size":1080,"mtime":1611847718207,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1610519047769,"results":"11","hashOfConfig":"12"},{"size":500,"mtime":1610519047769,"results":"13","hashOfConfig":"12"},{"size":2687,"mtime":1611836204320,"results":"14","hashOfConfig":"9"},{"size":668,"mtime":1611137325867,"results":"15","hashOfConfig":"12"},{"size":4669,"mtime":1611848332421,"results":"16","hashOfConfig":"9"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"20"},"iky6jg",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"2zwhay",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/huy/projects/bhxh/src/App.js",["33"],"import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport ModalSalary from \"./components/ModalSalary\";\nimport ModalZones from './components/ModalZones';\nimport {\n  maximumInsurancePerMonth,\n  minimumSalaryByZone,\n  months, percentageCompanyPays, percentageWorkerPays,\n  salaryTypes,\n  years,\n  zoneLabels,\n  zones\n} from \"./constants\";\nimport utils from \"./utils\";\n\nconst defaultPeriod = {\n  salary: '',\n  zone: zones.zone1,\n};\n\nfunction App() {\n  const [periods, setPeriods] = React.useState([{...defaultPeriod}]);\n  const [result, setResult] = React.useState(null);\n  const [showModalSalary, setShowModalSalary] = React.useState(false);\n  const [showModalZone, setShowModalZone] = React.useState(false);\n\n  const addPeriod = () => {\n    setPeriods([...periods, {...defaultPeriod}]);\n  };\n\n  const removePeriod = (index) => {\n    setPeriods([...periods.filter((period, idx) => idx !== index)]);\n  };\n\n  const calculate = () => {\n    const isValid = true;\n    const updatedPeriods = [];\n    let hasError = false;\n\n    periods.forEach((period) => {\n      const errorMessage = utils.validatePeriod(period);\n\n      if (errorMessage) hasError = true;\n\n      updatedPeriods.push({\n        ...period,\n        errorMessage: errorMessage,\n      })\n    });\n\n    setPeriods(updatedPeriods);\n\n    if (!hasError) {\n      setResult(utils.calculatePeriods(periods));\n    }\n  };\n\n  const updatePeriod = (periodIndex, data) => {\n    const updatedPeriods = [...periods];\n    updatedPeriods[periodIndex] = {\n      ...periods[periodIndex],\n      ...data,\n      errorMessage: '',\n    };\n\n    setPeriods([\n      ...updatedPeriods,\n    ]);\n  };\n\n  const handleSalaryChange = (periodIndex, salary) => {\n    if (salary.length === 0) {\n      updatePeriod(periodIndex, {salary: ''});\n      return;\n    }\n\n    const salaryInInteger = parseInt(salary.replace(/[^0-9]/g, '') || 0);\n    const localeString = salaryInInteger.toLocaleString('en');\n    const formattedSalary = localeString.replace(/,/g, ' ');\n\n    const period = periods[periodIndex];\n    const zone = period.zone;\n    let amountPaidForInsurance = null;\n\n    if (salaryInInteger >= minimumSalaryByZone[zone] && salaryInInteger <= maximumInsurancePerMonth) {\n      amountPaidForInsurance = utils.calculateAmountPaid(salaryInInteger);\n    }\n\n    updatePeriod(periodIndex, {salary: formattedSalary, amountPaidForInsurance});\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>BHXH</h1>\n      <hr/>\n      {periods.map((period, index) => {\n        const {\n          salary,\n          monthStart,\n          monthEnd,\n          yearStart,\n          yearEnd,\n          errorMessage,\n          amountPaidForInsurance,\n        } = period;\n        let isValidTimeRange = true;\n        if (monthStart && monthEnd && yearStart && yearEnd) {\n          if (yearEnd < yearStart || (yearEnd === yearStart && monthEnd < monthStart)) {\n            isValidTimeRange = false;\n          }\n        }\n\n        return (\n          <div className=\"row my-4\" key={index}>\n            <div className=\"col-lg-6\">\n              <div className=\"card\">\n                <div className=\"card-header\">\n                  <strong>#{index + 1}</strong>\n                  <span className=\"float-right\">\n                    <button\n                      title=\"Xóa\"\n                      onClick={() => removePeriod(index)}\n                      className=\"close\"\n                    >\n                      ×\n                    </button>\n                  </span>\n                </div>\n                <div className=\"card-body\">\n                  <div className=\"form-group\">\n                    <label htmlFor=\"exampleInputEmail1\">Từ: </label>\n                    <select\n                      id=\"inputState\"\n                      className=\"mx-3\"\n                      onChange={(e) => updatePeriod(index, {monthStart: e.target.value})}\n                    >\n                      <option>Tháng...</option>\n                      {months.map((label, index) => (<option value={index + 1} key={index}>{label}</option>))}\n                    </select>\n                    <select\n                      id=\"inputState\"\n                      className=\"\"\n                      onChange={(e) => updatePeriod(index, {yearStart: e.target.value})}\n                    >\n                      <option>Năm...</option>\n                      {years.map((label) => (<option value={label} key={label}>{label}</option>))}\n                    </select>\n                  </div>\n                  <div className=\"form-group\">\n                    <label htmlFor=\"exampleInputEmail1\">Đến: </label>\n                    <select\n                      id=\"inputState\"\n                      className=\"mx-3\"\n                      onChange={(e) => updatePeriod(index, {monthEnd: e.target.value})}\n                    >\n                      <option>Tháng...</option>\n                      {months.map((label, index) => (<option value={index + 1} key={index}>{label}</option>))}\n                    </select>\n                    <select\n                      id=\"inputState\"\n                      onChange={(e) => updatePeriod(index, {yearEnd: e.target.value})}\n                    >\n                      <option>Năm...</option>\n                      {years.map((label) => (<option value={label} key={label}>{label}</option>))}\n                    </select>\n                  </div>\n                  <div className=\"form-group\">\n                    <label htmlFor=\"inputSalary\">Mức lương</label>\n                    <select\n                      id=\"inputSalary\"\n                      className=\"mx-2\"\n                      onChange={(e) => updatePeriod(index, {yearStart: e.target.value})}\n                    >\n                      {/*<option value={salaryTypes.contracted}>chính thức</option>*/}\n                      <option value={salaryTypes.insurance}>đóng BHXH</option>\n                    </select>\n                    <input\n                      type=\"text\"\n                      placeholder=\"10 000 000\"\n                      id=\"exampleInputEmail1\"\n                      aria-describedby=\"emailHelp\"\n                      value={salary}\n                      onChange={(e) => handleSalaryChange(index, e.target.value)}\n                      style={{width: '120px'}}\n                    />\n                    <span className=\"text-secondary\"> đ</span>\n                    <button\n                      className=\"btn btn-sm btn-link mx-1\"\n                      onClick={() => setShowModalSalary(true)}\n                      disabled={showModalSalary}\n                    >\n                      *Giải thích\n                    </button>\n                  </div>\n                  <div>\n                    Vùng\n                    {' '}\n                    {Object.keys(zoneLabels).map((zoneCode) => {\n                      const id = 'radio' + zoneCode;\n                      return (\n                        <div className=\"form-check form-check-inline mx-3\" key={zoneCode}>\n                          <input\n                            className=\"form-check-input\"\n                            type=\"radio\"\n                            name=\"zone\"\n                            id={id}\n                            value={zoneCode}\n                          />\n                          <label className=\"form-check-label\" htmlFor={id}>{zoneLabels[zoneCode]}</label>\n                        </div>\n                      )\n                    })}\n                    <button\n                      className=\"btn btn-sm btn-link mx-1\"\n                      onClick={() => setShowModalZone(true)}\n                      disabled={showModalZone}\n                    >\n                      *Giải thích\n                    </button>\n                  </div>\n                  {amountPaidForInsurance && (\n                    <div className=\"mt-3\">\n                      Số tiền đóng BHXH:\n                      <ul>\n                        <li>Công ty đóng ({percentageCompanyPays}%): {utils.formatNumber(amountPaidForInsurance.byCompany)}</li>\n                        <li>Người lao động đóng ({percentageWorkerPays}%): {utils.formatNumber(amountPaidForInsurance.byWorker)}</li>\n                        <li>Tổng cộng: <strong>{utils.formatNumber(amountPaidForInsurance.total)}đ / tháng</strong></li>\n                      </ul>\n                    </div>\n                  )}\n                  {!isValidTimeRange && (\n                    <div>\n                      <span className=\"text-danger\">Thời gian không phù hợp, vui lòng chọn lại!</span>\n                    </div>\n                  )}\n                  {errorMessage && (\n                    <div>\n                      <span className=\"text-danger\">{errorMessage}</span>\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n        );\n      })}\n      <button\n        onClick={addPeriod}\n        className=\"btn btn-sm btn-success\"\n      >\n        + Thêm thời gian\n      </button>\n      <div className=\"mt-5\">\n        <button\n          className=\"btn btn-lg btn-primary\"\n          onClick={calculate}\n        >\n          Tính\n        </button>\n      </div>\n      {result && (\n        <div>\n          <h3>Result</h3>\n          <p>{result.result}</p>\n        </div>\n      )}\n      <ModalSalary show={showModalSalary} setShow={setShowModalSalary}/>\n      <ModalZones show={showModalZone} setShow={setShowModalZone} />\n    </div>\n  );\n}\n\nexport default App;\n",["34","35"],"/home/huy/projects/bhxh/src/constants.js",[],"/home/huy/projects/bhxh/src/reportWebVitals.js",[],"/home/huy/projects/bhxh/src/index.js",[],"/home/huy/projects/bhxh/src/utils.js",["36","37"],"/home/huy/projects/bhxh/src/components/ModalSalary.js",[],"/home/huy/projects/bhxh/src/components/ModalZones.js",[],{"ruleId":"38","severity":1,"message":"39","line":36,"column":11,"nodeType":"40","messageId":"41","endLine":36,"endColumn":18},{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","replacedBy":"45"},{"ruleId":"38","severity":1,"message":"46","line":68,"column":10,"nodeType":"40","messageId":"41","endLine":68,"endColumn":25},{"ruleId":"47","severity":1,"message":"48","line":91,"column":1,"nodeType":"49","endLine":96,"endColumn":3},"no-unused-vars","'isValid' is assigned a value but never used.","Identifier","unusedVar","no-native-reassign",["50"],"no-negated-in-lhs",["51"],"'getNumberOfYear' is defined but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation"]