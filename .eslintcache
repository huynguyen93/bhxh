[{"/home/huy/projects/bhxh/src/App.js":"1","/home/huy/projects/bhxh/src/constants.js":"2","/home/huy/projects/bhxh/src/reportWebVitals.js":"3","/home/huy/projects/bhxh/src/index.js":"4","/home/huy/projects/bhxh/src/utils.js":"5","/home/huy/projects/bhxh/src/components/ModalSalary.js":"6","/home/huy/projects/bhxh/src/components/ModalZones.js":"7"},{"size":7007,"mtime":1614940340405,"results":"8","hashOfConfig":"9"},{"size":1045,"mtime":1614940340397,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1610519047769,"results":"11","hashOfConfig":"9"},{"size":500,"mtime":1610519047769,"results":"12","hashOfConfig":"9"},{"size":3412,"mtime":1614940291315,"results":"13","hashOfConfig":"9"},{"size":668,"mtime":1611836204320,"results":"14","hashOfConfig":"15"},{"size":4669,"mtime":1611901987822,"results":"16","hashOfConfig":"9"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},"2zwhay",{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"iky6jg",{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/huy/projects/bhxh/src/App.js",["32"],"import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport ModalSalary from \"./components/ModalSalary\";\nimport {\n  months,\n  years\n} from \"./constants\";\nimport utils from \"./utils\";\n\nconst defaultPeriod = {\n  salary: '',\n};\n\nfunction App() {\n  const [periods, setPeriods] = React.useState([{...defaultPeriod}]);\n  const [result, setResult] = React.useState(null);\n  const [showModalSalary, setShowModalSalary] = React.useState(false);\n\n  const addPeriod = () => {\n    setPeriods([...periods, {...defaultPeriod}]);\n  };\n\n  const removePeriod = (index) => {\n    setPeriods([...periods.filter((period, idx) => idx !== index)]);\n  };\n\n  const calculate = () => {\n    const isValid = true;\n    const updatedPeriods = [];\n    let hasError = false;\n\n    periods.forEach((period) => {\n      const errorMessage = utils.validatePeriod(period);\n\n      if (errorMessage) hasError = true;\n\n      updatedPeriods.push({\n        ...period,\n        errorMessage: errorMessage,\n      })\n    });\n\n    setPeriods(updatedPeriods);\n\n    if (!hasError) {\n      setResult(utils.calculatePeriods(periods));\n    }\n  };\n\n  const updatePeriod = (periodIndex, data) => {\n    const updatedPeriods = [...periods];\n    updatedPeriods[periodIndex] = {\n      ...periods[periodIndex],\n      ...data,\n      errorMessage: '',\n    };\n\n    setPeriods([\n      ...updatedPeriods,\n    ]);\n  };\n\n  const handleSalaryChange = (periodIndex, salary) => {\n    if (salary.length === 0) {\n      updatePeriod(periodIndex, {salary: ''});\n      return;\n    }\n\n    const salaryInInteger = parseInt(salary.replace(/[^0-9]/g, '') || 0);\n    const localeString = salaryInInteger.toLocaleString('en');\n    const formattedSalary = localeString.replace(/,/g, ' ');\n\n    const amountPaidForInsurance = utils.calculateAmountPaid(salaryInInteger);\n\n    updatePeriod(periodIndex, {salary: formattedSalary, amountPaidForInsurance});\n  };\n\n  return (\n    <div className=\"App\">\n      <table className=\"table table-bordered table-responsive-md\">\n        <thead>\n        <tr>\n          <th>#</th>\n          <th>Từ... </th>\n          <th>Đến... </th>\n          <th>\n            Lương đóng BHXH\n            <button\n              className=\"btn btn-sm btn-link mx-1\"\n              onClick={() => setShowModalSalary(true)}\n              disabled={showModalSalary}\n            >\n\n            </button>\n          </th>\n          <th/>\n        </tr>\n        </thead>\n        <tbody>\n          {periods.map((period, index) => {\n            const {\n              salary,\n            } = period;\n\n            return (\n              <tr key={index}>\n                <td>{index + 1}</td>\n                <td>\n                  <select\n                    id=\"inputState\"\n                    className=\"mx-3\"\n                    onChange={(e) => updatePeriod(index, {monthStart: e.target.value})}\n                  >\n                    <option>Tháng...</option>\n                    {months.map((label, index) => (<option value={index + 1} key={index}>{label}</option>))}\n                  </select>\n                  <select\n                    id=\"inputState\"\n                    className=\"\"\n                    onChange={(e) => updatePeriod(index, {yearStart: e.target.value})}\n                  >\n                    <option>Năm...</option>\n                    {years.map((label) => (<option value={label} key={label}>{label}</option>))}\n                  </select>\n                </td>\n                <td>\n                  <select\n                    id=\"inputState\"\n                    className=\"mx-3\"\n                    onChange={(e) => updatePeriod(index, {monthEnd: e.target.value})}\n                  >\n                    <option>Tháng...</option>\n                    {months.map((label, index) => (<option value={index + 1} key={index}>{label}</option>))}\n                  </select>\n                  <select\n                    id=\"inputState\"\n                    onChange={(e) => updatePeriod(index, {yearEnd: e.target.value})}\n                  >\n                    <option>Năm...</option>\n                    {years.map((label) => (<option value={label} key={label}>{label}</option>))}\n                  </select>\n                </td>\n                <td>\n                  <input\n                    type=\"text\"\n                    placeholder=\"10 000 000\"\n                    id=\"exampleInputEmail1\"\n                    aria-describedby=\"emailHelp\"\n                    value={salary}\n                    onChange={(e) => handleSalaryChange(index, e.target.value)}\n                    style={{width: '120px'}}\n                  />\n                  {' '}\n                  vnd\n                </td>\n                <td>\n                  <button\n                    title=\"Xóa\"\n                    onClick={() => removePeriod(index)}\n                    className=\"btn btn-sm rounded btn-danger\"\n                  >\n                    xóa\n                  </button>\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n      <div className=\"mb-4\">\n        <button\n          onClick={addPeriod}\n          className=\"btn btn-sm btn-secondary mr-2\"\n        >\n          <b>+</b> thêm dòng\n        </button>\n      </div>\n      <ul>\n        {periods.map((period, index) => {\n          const {\n            monthStart,\n            monthEnd,\n            yearStart,\n            yearEnd,\n            errorMessage,\n          } = period;\n          let isValidTimeRange = true;\n          if (monthStart && monthEnd && yearStart && yearEnd) {\n            if (yearEnd < yearStart || (yearEnd === yearStart && monthEnd < monthStart)) {\n              isValidTimeRange = false;\n            }\n          }\n\n          if (isValidTimeRange && !errorMessage) {\n            return null;\n          }\n\n          return (\n            <li key={index}>\n              Lỗi ở dòng {index + 1}:\n              {' '}\n              {!isValidTimeRange && (\n                <span className=\"text-danger\">Thời gian không phù hợp, vui lòng chọn lại!</span>\n              )}\n              {' '}\n              {errorMessage && (\n                <span className=\"text-danger\">{errorMessage}</span>\n              )}\n            </li>\n          );\n        })}\n      </ul>\n\n      <div className=\"mt-5 mb-5\">\n        <button\n          className=\"btn btn-lg btn-primary\"\n          onClick={calculate}\n        >\n          Xem kết quả\n        </button>\n      </div>\n      {result && (\n        <div>\n          <h2>Kết quả</h2>\n          <p>Số tháng đóng BHXH: {result.totalMonths}</p>\n          <p>Thu nhập bình quân: {utils.formatNumber(result.adjustedAverageSalary)} vnd</p>\n          <p className=\"text-success\">\n            <b>\n              Số tiền sẽ nhận: {utils.formatNumber(result.amountWillReceive)} vnd\n            </b>\n          </p>\n        </div>\n      )}\n      <ModalSalary show={showModalSalary} setShow={setShowModalSalary}/>\n    </div>\n  );\n}\n\nexport default App;\n","/home/huy/projects/bhxh/src/constants.js",[],"/home/huy/projects/bhxh/src/reportWebVitals.js",[],"/home/huy/projects/bhxh/src/index.js",[],"/home/huy/projects/bhxh/src/utils.js",["33","34"],"/home/huy/projects/bhxh/src/components/ModalSalary.js",[],"/home/huy/projects/bhxh/src/components/ModalZones.js",[],{"ruleId":"35","severity":1,"message":"36","line":28,"column":11,"nodeType":"37","messageId":"38","endLine":28,"endColumn":18},{"ruleId":"35","severity":1,"message":"39","line":108,"column":10,"nodeType":"37","messageId":"38","endLine":108,"endColumn":25},{"ruleId":"40","severity":1,"message":"41","line":131,"column":1,"nodeType":"42","endLine":136,"endColumn":3},"no-unused-vars","'isValid' is assigned a value but never used.","Identifier","unusedVar","'getNumberOfYear' is defined but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration"]