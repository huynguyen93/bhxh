[{"/home/huy/projects/bhxh/src/App.js":"1","/home/huy/projects/bhxh/src/constants.js":"2","/home/huy/projects/bhxh/src/reportWebVitals.js":"3","/home/huy/projects/bhxh/src/index.js":"4","/home/huy/projects/bhxh/src/utils.js":"5","/home/huy/projects/bhxh/src/components/ModalZones.js":"6","/home/huy/projects/bhxh/src/components/Result.js":"7","/home/huy/projects/bhxh/src/components/ModalAdjustments.js":"8","/home/huy/projects/bhxh/src/components/ModalInsuranceSalary.js":"9"},{"size":8650,"mtime":1618291886824,"results":"10","hashOfConfig":"11"},{"size":1462,"mtime":1618289389525,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":1611836204320,"results":"13","hashOfConfig":"11"},{"size":478,"mtime":1615216442310,"results":"14","hashOfConfig":"11"},{"size":3823,"mtime":1615007234168,"results":"15","hashOfConfig":"11"},{"size":4669,"mtime":1611901987822,"results":"16","hashOfConfig":"17"},{"size":4977,"mtime":1615167237252,"results":"18","hashOfConfig":"11"},{"size":1488,"mtime":1615035172007,"results":"19","hashOfConfig":"11"},{"size":2536,"mtime":1615085898773,"results":"20","hashOfConfig":"11"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"24"},"1v4gcpn",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"29"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"2zwhay",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/huy/projects/bhxh/src/App.js",["44"],"import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport ModalInsuranceSalary from './components/ModalInsuranceSalary';\nimport Result from './components/Result';\nimport {\n  months,\n  years,\n} from \"./constants\";\nimport utils from \"./utils\";\n\nlet periodId = 0;\n\nfunction createNewPeriod(lastPeriod) {\n  let monthStart = '';\n  let monthEnd = '';\n  let yearStart = '';\n  let yearEnd = '';\n\n  if (lastPeriod) {\n    const lastMonthStart = parseInt(lastPeriod['monthStart']) || false;\n    const lastMonthEnd = parseInt(lastPeriod['monthEnd']) || lastMonthStart || false;\n    const lastYearStart = parseInt(lastPeriod['yearStart']) || false;\n    const lastYearEnd = parseInt(lastPeriod['yearEnd']) || lastYearStart || false;\n\n    if (lastMonthStart && lastMonthEnd) {\n      monthStart = lastMonthEnd === 12 ? 1 : lastMonthEnd + 1;\n      yearStart = lastYearEnd || '';\n      if (monthStart === 1 && yearStart) {\n        yearStart++;\n      }\n\n      monthEnd = monthStart === 12 ? 1 : monthStart + 1;\n      yearEnd = yearStart || '';\n      if (monthEnd === 1 && yearEnd) {\n        yearEnd++;\n      }\n    }\n  }\n\n  return  {\n    salary: '',\n    id: periodId,\n    monthStart,\n    monthEnd,\n    yearStart,\n    yearEnd,\n  };\n}\n\nfunction App() {\n  const [periods, setPeriods] = React.useState([{...createNewPeriod()}]);\n  const [result, setResult] = React.useState(null);\n  const [showModalSalary, setShowModalSalary] = React.useState(false);\n\n  const addPeriod = () => {\n    periodId++;\n    const lastPeriod = periods[periods.length - 1];\n    const newPeriod = createNewPeriod(lastPeriod);\n\n    console.log(newPeriod);\n\n    setPeriods([...periods, newPeriod]);\n    setResult(null);\n  };\n\n  const removePeriod = (index) => {\n    setPeriods([...periods.filter((period, idx) => idx !== index)]);\n    setResult(null);\n  };\n\n  const calculate = () => {\n    const updatedPeriods = [];\n    let hasError = false;\n\n    periods.forEach((period) => {\n      const errorMessage = utils.validatePeriod(period);\n\n      if (errorMessage) hasError = true;\n\n      updatedPeriods.push({\n        ...period,\n        errorMessage: errorMessage,\n      })\n    });\n\n    setPeriods(updatedPeriods);\n\n    if (!hasError) {\n      setResult(utils.calculatePeriods(periods));\n    }\n  };\n\n  const updatePeriod = (periodIndex, data) => {\n    const updatedPeriods = [...periods];\n    updatedPeriods[periodIndex] = {\n      ...periods[periodIndex],\n      ...data,\n      errorMessage: '',\n    };\n\n    setPeriods([\n      ...updatedPeriods,\n    ]);\n\n    setResult(null);\n  };\n\n  const handleSalaryChange = (periodIndex, salary) => {\n    if (salary.length === 0) {\n      updatePeriod(periodIndex, {salary: ''});\n      return;\n    }\n\n    const salaryInInteger = parseInt(salary.replace(/[^0-9]/g, '') || 0);\n    const localeString = salaryInInteger.toLocaleString('en');\n    const formattedSalary = localeString.replace(/,/g, ' ');\n\n    const amountPaidForInsurance = utils.calculateAmountPaid(salaryInInteger);\n\n    updatePeriod(periodIndex, {salary: formattedSalary, amountPaidForInsurance});\n  };\n\n  const fillPeriod = (index) => {\n    const period = periods[index];\n    if (!period) {\n      return;\n    }\n\n    const previousPeriod = periods[index - 1];\n    if (!previousPeriod) {\n      return;\n    }\n\n    updatePeriod(index, {\n      ...createNewPeriod(previousPeriod),\n      ...period,\n    });\n  };\n\n  return (\n    <div className=\"App\">\n      <button className=\"btn btn-sm btn-link\" onClick={() => setShowModalSalary(true)} disabled={showModalSalary}>\n        Hướng dẫn kiểm tra mức lương đóng BHXH\n      </button>\n      <table className=\"table table-bordered table-responsive-md\">\n        <thead>\n        <tr>\n          <th>#</th>\n          <th>Từ... </th>\n          <th>Đến... </th>\n          <th>\n            Mức lương đóng BHXH\n          </th>\n          <th/>\n        </tr>\n        </thead>\n        <tbody>\n          {periods.map((period, index) => {\n            const {\n              id,\n              salary,\n              monthStart,\n              monthEnd,\n              yearStart,\n              yearEnd,\n            } = period;\n\n            return (\n              <tr key={id}>\n                <td>{index + 1}</td>\n                <td>\n                  <select\n                    className=\"mr-3\"\n                    onChange={(e) => updatePeriod(index, {monthStart: e.target.value})}\n                    value={monthStart}\n                  >\n                    <option>Tháng...</option>\n                    {months.map((label, index) => (<option value={index + 1} key={index}>{label}</option>))}\n                  </select>\n                  <select\n                    className=\"\"\n                    onChange={(e) => updatePeriod(index, {yearStart: e.target.value})}\n                    value={yearStart}\n                  >\n                    <option>Năm...</option>\n                    {years.map((label) => (<option value={label} key={label}>{label}</option>))}\n                  </select>\n                </td>\n                <td>\n                  <select\n                    className=\"mr-3\"\n                    onChange={(e) => updatePeriod(index, {monthEnd: e.target.value})}\n                    value={monthEnd}\n                  >\n                    <option>Tháng...</option>\n                    {months.map((label, index) => (<option value={index + 1} key={index}>{label}</option>))}\n                  </select>\n                  <select\n                    onChange={(e) => {\n                      updatePeriod(index, {yearEnd: e.target.value});\n\n                      // fillPeriod(index + 1);\n                    }}\n                    value={yearEnd}\n                  >\n                    <option>Năm...</option>\n                    {years.map((label) => (<option value={label} key={label}>{label}</option>))}\n                  </select>\n                </td>\n                <td>\n                  <input\n                    type=\"text\"\n                    placeholder=\"10 000 000\"\n                    aria-describedby=\"emailHelp\"\n                    value={salary}\n                    onChange={(e) => handleSalaryChange(index, e.target.value)}\n                    style={{width: '120px'}}\n                  />\n                  {' '}\n                  vnđ\n                </td>\n                <td>\n                  <button\n                    title=\"Xóa\"\n                    onClick={() => removePeriod(index)}\n                    className=\"btn btn-sm rounded btn-danger\"\n                  >\n                    xóa\n                  </button>\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n      <div className=\"mb-4\">\n        <button\n          onClick={addPeriod}\n          className=\"btn btn-sm btn-secondary mr-2\"\n        >\n          <b>+</b> thêm dòng\n        </button>\n      </div>\n      <ul>\n        {periods.map((period, index) => {\n          const monthStart = parseInt(period.monthStart);\n          const monthEnd = parseInt(period.monthEnd);\n          const yearStart = parseInt(period.yearStart);\n          const yearEnd = parseInt(period.yearEnd);\n          const {errorMessage} = period;\n\n          let isValidTimeRange = true;\n          if (monthStart && monthEnd && yearStart && yearEnd) {\n            if (yearEnd < yearStart || (yearEnd === yearStart && monthEnd < monthStart)) {\n              isValidTimeRange = false;\n            }\n          }\n\n          if (isValidTimeRange && !errorMessage) {\n            return null;\n          }\n\n          return (\n            <li key={index}>\n              Lỗi ở dòng {index + 1}:\n              {' '}\n              {!isValidTimeRange && (\n                <span className=\"text-danger\">Thời gian không phù hợp, vui lòng chọn lại!</span>\n              )}\n              {' '}\n              {errorMessage && (\n                <span className=\"text-danger\">{errorMessage}</span>\n              )}\n            </li>\n          );\n        })}\n      </ul>\n\n      {!result && (\n        <div className=\"mt-5 mb-3\">\n          <button\n            className=\"btn btn-lg btn-primary\"\n            onClick={calculate}\n            disabled={periods.length === 0}\n          >\n            Xem kết quả\n          </button>\n        </div>\n      )}\n\n      {result && (\n        <div className=\"card mt-5\">\n          <div className=\"card-body\">\n            <Result\n              result={result}\n            />\n          </div>\n        </div>\n      )}\n      <ModalInsuranceSalary\n        show={showModalSalary}\n        setShow={setShowModalSalary}\n      />\n    </div>\n  );\n}\n\nexport default App;\n",["45","46"],"/home/huy/projects/bhxh/src/constants.js",[],"/home/huy/projects/bhxh/src/reportWebVitals.js",[],["47","48"],"/home/huy/projects/bhxh/src/index.js",[],"/home/huy/projects/bhxh/src/utils.js",["49"],"import {adjustments, percentageCompanyPays, percentageWorkerPays, salaryTypes} from \"./constants\";\n\nfunction calculatePeriods(periods) {\n  let totalMonthsBefore2014 = 0;\n  let totalMonthsFrom2014 = 0;\n  let adjustedSalary = 0;\n  let estimatedContributed = 0;\n  let adjustedAverageSalaryFormula = '{';\n\n  periods.forEach(period => {\n    const monthStart = parseInt(period.monthStart);\n    const yearStart = parseInt(period.yearStart);\n    const monthEnd = parseInt(period.monthEnd);\n    const yearEnd = parseInt(period.yearEnd);\n    const salary = parseInt(period.salary.split(' ').join(''));\n    const salaryType = period.salaryType;\n    const insuranceSalary = salaryType === salaryTypes.contracted\n      ? contractedSalaryToInsuranceSalary(salary)\n      : salary;\n\n    for (let year = yearStart; year <= yearEnd; year++) {\n      const adjustment = getAdjustmentRate(year);\n      let totalMonthsOfPeriod = 0;\n\n      if (yearStart === yearEnd) {\n        totalMonthsOfPeriod = monthEnd - monthStart + 1;\n      } else if (year === yearStart) {\n        totalMonthsOfPeriod = 12 - monthStart + 1;\n      } else if (year === yearEnd) {\n        totalMonthsOfPeriod = monthEnd;\n      } else {\n        totalMonthsOfPeriod = 12;\n      }\n\n      adjustedAverageSalaryFormula += `(${totalMonthsOfPeriod} * ${formatNumber(insuranceSalary)} * ${adjustment})`\n      adjustedSalary += (totalMonthsOfPeriod * insuranceSalary * adjustment);\n      estimatedContributed += (totalMonthsOfPeriod * insuranceSalary) * 20 / 100;\n\n      if (year < 2014) {\n        totalMonthsBefore2014 += totalMonthsOfPeriod;\n      } else {\n        totalMonthsFrom2014 += totalMonthsOfPeriod;\n      }\n    }\n  });\n\n  const totalMonths = totalMonthsBefore2014 + totalMonthsFrom2014;\n\n  const adjustedAverageSalary = adjustedSalary / totalMonths;\n  const totalYearsBefore2014 = calculateTotalYears(totalMonthsBefore2014);\n  const totalYearsFrom2014 = calculateTotalYears(totalMonthsFrom2014);\n\n  adjustedAverageSalaryFormula = adjustedAverageSalaryFormula.split(')(').join(') + (');\n  adjustedAverageSalaryFormula += `} : ${totalMonths}`;\n\n  return {\n    totalYearsBefore2014,\n    totalYearsFrom2014,\n    adjustedAverageSalaryFormula,\n    estimatedContributed,\n    adjustedSalary,\n    adjustedAverageSalary,\n    totalMonths,\n    amountWillReceive: (1.5 * adjustedAverageSalary * totalYearsBefore2014) + (2 * adjustedAverageSalary * totalYearsFrom2014)\n  };\n}\n\nfunction calculateTotalYears(totalMonths) {\n  const modulo = totalMonths % 12;\n  const rawYears = totalMonths / 12;\n  if (modulo === 0) {\n    return rawYears;\n  } else if (modulo <= 6) {\n    return Math.round(rawYears) + 0.5\n  } else {\n    return Math.ceil(rawYears);\n  }\n}\n\nfunction validatePeriod(period) {\n  const {salary, monthStart, monthEnd, yearStart, yearEnd} = period;\n  let errorMessage = '';\n\n  if (!salary || !monthStart || !monthEnd || !yearStart || !yearEnd) {\n    errorMessage = 'Vui lòng điền hết thông tin!';\n  }\n\n  return errorMessage;\n}\n\nfunction getAdjustmentRate(year) {\n  const years = Object.keys(adjustments);\n  if (year < years[0]) {\n    return adjustments[years[0]];\n  }\n\n  if (year > years[years.length - 1]) {\n    return adjustments[years[years.length - 1]];\n  }\n\n  return adjustments[year];\n}\n\nfunction contractedSalaryToInsuranceSalary(contractedSalary) {\n\n}\n\nfunction calculateAmountPaid(insuranceSalary) {\n  const byCompany = insuranceSalary * percentageCompanyPays / 100;\n  const byWorker = insuranceSalary * percentageWorkerPays / 100;\n\n  return {\n    byCompany,\n    byWorker,\n    total: byCompany + byWorker,\n  };\n}\n\nfunction formatNumber(number, withVnd = false) {\n  const suffix = withVnd ? ' vnđ' : '';\n  return Math.round(number).toLocaleString('en') + suffix;\n}\n\nexport default {\n  calculatePeriods,\n  validatePeriod,\n  calculateAmountPaid,\n  formatNumber,\n};\n","/home/huy/projects/bhxh/src/components/ModalZones.js",[],"/home/huy/projects/bhxh/src/components/Result.js",[],"/home/huy/projects/bhxh/src/components/ModalAdjustments.js",["50"],"import React from 'react';\nimport Modal from 'react-bootstrap/Modal';\nimport {adjustments} from '../constants';\n\nfunction ModalAdjustments({ show, setShow}) {\n  return (\n    <Modal\n      show={show}\n      onHide={() => setShow(false)}\n      dialogClassName=\"modal-90w\"\n      aria-labelledby=\"salary-adjustment\"\n    >\n      <Modal.Header closeButton>\n        <Modal.Title id=\"salary-adjustment\">\n          Mức điều chỉnh lương\n        </Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <p>\n          Theo\n          {' '}\n          <a target=\"_blank\" href=\"https://luatvietnam.vn/lao-dong/thong-tu-35-2019-tt-bldtbxh-muc-dieu-chinh-tien-luong-thu-nhap-thang-da-dong-bao-hiem-xa-hoi-180368-d1.html\">\n            Điều 2 Thông tư 35/2019/TT-BLĐTBXH\n          </a>,\n          mức điều chỉnh tiền lương tháng đóng BHXH của người lao động như sau:\n        </p>\n        <table className=\"table table-bordered table-striped\">\n          <thead>\n          <tr>\n            <th>Năm</th>\n            <th>Mức điều chỉnh</th>\n          </tr>\n          </thead>\n          <tbody>\n          {Object.keys(adjustments).map((year, index) => {\n            return (\n              <tr key={year}>\n                <td>{index === 0 && '<= '}{year}</td>\n                <td>{adjustments[year]}</td>\n              </tr>\n            )\n          })}\n          </tbody>\n        </table>\n      </Modal.Body>\n    </Modal>\n  )\n}\n\nexport default ModalAdjustments;\n","/home/huy/projects/bhxh/src/components/ModalInsuranceSalary.js",["51","52","53","54"],{"ruleId":"55","severity":1,"message":"56","line":123,"column":9,"nodeType":"57","messageId":"58","endLine":123,"endColumn":19},{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","replacedBy":"62"},{"ruleId":"59","replacedBy":"63"},{"ruleId":"61","replacedBy":"64"},{"ruleId":"65","severity":1,"message":"66","line":124,"column":1,"nodeType":"67","endLine":129,"endColumn":3},{"ruleId":"68","severity":1,"message":"69","line":22,"column":14,"nodeType":"70","endLine":22,"endColumn":29},{"ruleId":"68","severity":1,"message":"69","line":24,"column":29,"nodeType":"70","endLine":24,"endColumn":44},{"ruleId":"68","severity":1,"message":"69","line":27,"column":34,"nodeType":"70","endLine":27,"endColumn":49},{"ruleId":"68","severity":1,"message":"69","line":54,"column":24,"nodeType":"70","endLine":54,"endColumn":39},{"ruleId":"68","severity":1,"message":"69","line":57,"column":24,"nodeType":"70","endLine":57,"endColumn":39},"no-unused-vars","'fillPeriod' is assigned a value but never used.","Identifier","unusedVar","no-native-reassign",["71"],"no-negated-in-lhs",["72"],["71"],["72"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","no-global-assign","no-unsafe-negation"]